// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: demo.proto

package simple_gprc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClassRegistrationService_GetClassRegistrationStat_FullMethodName = "/demo.ClassRegistrationService/GetClassRegistrationStat"
)

// ClassRegistrationServiceClient is the client API for ClassRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassRegistrationServiceClient interface {
	GetClassRegistrationStat(ctx context.Context, in *ClassRegistrationStatRequest, opts ...grpc.CallOption) (*ClassRegistrationStatResponse, error)
}

type classRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassRegistrationServiceClient(cc grpc.ClientConnInterface) ClassRegistrationServiceClient {
	return &classRegistrationServiceClient{cc}
}

func (c *classRegistrationServiceClient) GetClassRegistrationStat(ctx context.Context, in *ClassRegistrationStatRequest, opts ...grpc.CallOption) (*ClassRegistrationStatResponse, error) {
	out := new(ClassRegistrationStatResponse)
	err := c.cc.Invoke(ctx, ClassRegistrationService_GetClassRegistrationStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassRegistrationServiceServer is the server API for ClassRegistrationService service.
// All implementations must embed UnimplementedClassRegistrationServiceServer
// for forward compatibility
type ClassRegistrationServiceServer interface {
	GetClassRegistrationStat(context.Context, *ClassRegistrationStatRequest) (*ClassRegistrationStatResponse, error)
	mustEmbedUnimplementedClassRegistrationServiceServer()
}

// UnimplementedClassRegistrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassRegistrationServiceServer struct {
}

func (UnimplementedClassRegistrationServiceServer) GetClassRegistrationStat(context.Context, *ClassRegistrationStatRequest) (*ClassRegistrationStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassRegistrationStat not implemented")
}
func (UnimplementedClassRegistrationServiceServer) mustEmbedUnimplementedClassRegistrationServiceServer() {
}

// UnsafeClassRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassRegistrationServiceServer will
// result in compilation errors.
type UnsafeClassRegistrationServiceServer interface {
	mustEmbedUnimplementedClassRegistrationServiceServer()
}

func RegisterClassRegistrationServiceServer(s grpc.ServiceRegistrar, srv ClassRegistrationServiceServer) {
	s.RegisterService(&ClassRegistrationService_ServiceDesc, srv)
}

func _ClassRegistrationService_GetClassRegistrationStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassRegistrationStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassRegistrationServiceServer).GetClassRegistrationStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClassRegistrationService_GetClassRegistrationStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassRegistrationServiceServer).GetClassRegistrationStat(ctx, req.(*ClassRegistrationStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassRegistrationService_ServiceDesc is the grpc.ServiceDesc for ClassRegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassRegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.ClassRegistrationService",
	HandlerType: (*ClassRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClassRegistrationStat",
			Handler:    _ClassRegistrationService_GetClassRegistrationStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}
